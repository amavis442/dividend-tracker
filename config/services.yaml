# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    documents_directory: '%kernel.project_dir%/public/uploads/documents'
    app.path.research_attachments: /uploads/documents
    app.dividend.tax: 0.15
    app.dividend.exchangerate: 1.19

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Service\FileUploader:
        arguments:
            $targetDirectory: '%documents_directory%'

    App\Service\PositionService:
        arguments: 
            $entityManager: "@doctrine.orm.entity_manager"

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\EventListener\AddUser:
        tags:
            - { name: doctrine.event_listener, event: prePersist }    
    on_request_listener:
        class: App\EventListener\OnRequestListener
        arguments: ["@doctrine.orm.entity_manager","@security.token_storage"]
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }
